# This starter workflow helps you create a trace of any other GitHub Actions workflow.
# Analyze that trace data with Honeycomb to debug performance bottlenecks or failures.
#
# This Action is meant to wrap steps in your workflow to report what happened as each
# one ran. This action can be invoked differently, depending on the complexity and
# content in your step (e.g. many commands, shell commands, GitHub Actions, etc)
# Examples for common usage are contained in this workflow.
#
# To get started:
# 1. Visit the Honeycomb Sign Up Page and create an account.
# 2. Name your team (any name will do: for example, company name).
# 3. Copy your API key.
# 4. Create a GitHub Action Secret with this API key named "BUILDEVENT_APIKEY"
#
# For more information, see the [gha-buildevents README](https://github.com/honeycombio/gha-buildevents/#readme).

name: Trace Workflow

on:
  push:
    branches: ['**']

jobs:

  trace-workflow:
    runs-on: ubuntu-latest
    env:
      BUILDEVENT_FILE: "../buildevents.txt"

    steps:
      - uses: honeycombio/gha-buildevents@v2
        with:
          # Required: a Honeycomb API key - needed to send trace telemetry.
          apikey: ${{ secrets.BUILDEVENT_APIKEY }}

          # Required: the Honeycomb dataset to send traces to.
          dataset: buildevents

          # Optional: status, used to report trace status at the end of a job
          status: ${{ job.status }}

          # Optional: matrix-key, should only be used with matrix builds. Set
          # this to a value uniquely describing each matrix configuration.
          # matrix-key: ${{ matrix.value }}

  # Example 1 - basic reporting (one trace span per step) for any step in your workflow with one command
      - name: "Step with a simple command"
        run: |
          # Each Job MUST include unique STEP IDs to ensure each job's spans are properly organized together.
          STEP_ID=$(shuf -i 1-100000 -n 1)
          STEP_START=$(date +%s)
          # Then, run the command in your step
          sleep 10
          # By default, reporting includes fields from the environment (branch name, repo, build number, etc).
          # You can add additional context to each step by appending the globally set BUILDEVENT_FILE. Context is
          # added as space delimited key=val pairs (multi-line-capable, logfmt style). We recommend prepending a
          # space before adding a new field, as shown below.
          echo " runner-uname=$(uname -a)" >> $BUILDEVENT_FILE
          # When commands in this step are complete, use 'buildevents step' to send this step data to Honeycomb.
          # The final parameter in this command is a NAME applied to this trace span. If $STEP_ID is human readable,
          # set it as the NAME. When $STEP_ID is autogenerated, add a useful human readable name.
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'custom run step'

  # Example 2 - detailed reporting (multiple spans per step) for steps in your workflow with multiple commands
      - name: "Step with multiple sub commands"
        run: |
          # As before, set a STEP_ID and record the STEP_START time.
          STEP_ID=sub-commands
          STEP_START=$(date +%s)
          # When a step has multiple sub commands, 'buildevents cmd' will capture details about each sub command.
          # By default, the sub command must be a shell command invoked via bash -c using exec.
          # Syntax: buildevents cmd $TRACE_ID $STEP_ID $NAME -- $CMD
          buildevents cmd $TRACE_ID $STEP_ID 'sleep 5 seconds' -- sleep 5
          buildevents cmd $TRACE_ID $STEP_ID 'sleep 10 seconds' -- sleep 10
          # The command below will appear in the top level of the "sub-commands" step
          sleep 15
          # Use 'buildevents step' to send this data to Honeycomb. Here, $STEP_ID is human readable.
          buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

  # Example 3 - working with other Actions and wrapping multiple steps into one span.
      - name: "Honeycomb: Start JDK setup"
        run: |
          # Always set these. Here, these variables will be used by the finish step, so they must be exported.
          echo "STEP_ID=setup-jdk" >> $GITHUB_ENV
          echo "STEP_START=$(date +%s)" >> $GITHUB_ENV
        # run a 3rd party Action in a seperate step
      - name: "Set up JDK"
        uses: actions/setup-java@v3.5.1
        with:
          java-version: 14
          distribution: 'adopt'
        # if you want to wrap multiple actions into one span, you could add more steps here.
        # - name: "next step to run"
        #
        # when done adding workflow steps to this span, use one final step to send this data to Honeycomb.
      - name: "Honeycomb: Finish JDK setup"
        run: buildevents step $TRACE_ID $STEP_ID $STEP_START $STEP_ID

# At the end of your workflow, the gha-buildevents action automatically runs as a post-action that executes the
# 'buildevents build' command, which ends your trace span. You can see the trace generated via ui.honeycomb.io or
# by clicking on the link in the 'Post Run honeycombio/gha-buildevents@v2' step
#
# For more example usage patterns, see the [gha-buildevents README](https://github.com/honeycombio/gha-buildevents/#readme).
